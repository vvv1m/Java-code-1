封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为（Javabean类）
什么时候用继承：
    类与类之间，存在相同的内容，并满足子类是父类的一种，就可以考虑使用继承来优化代码
继承的格式：
    public class 子类 extends 父类 {}
继承的特点：
    Java只支持单继承，不支持多继承，但支持多层继承。
    A继承自B，B继承自C，称C为A的间接父类
    每一个类间接或直接的继承于Object，不写父类的类默认继承Object
    子类可以使用直接父类或间接父类里的内容，但不能使用间接父类的另一个子类（叔叔类）
子类能继承父类哪些内容：
    构造方法---非私有和私有的都不能继承， 若继承则类名不同，反证可得
    成员变量---非私有和私有的都可以继承
    成员方法---非私有的可以继承，私有的不能继承
    对成员方法的继承：
        Java底层从最顶级的父类开始设立一个虚方法表，会把经常用到的方法单独抽取出来，放到虚方法
    表中。
        所谓经常调用的方法，即为非private，非static，非final，满足三者为虚方法
        父类会把自己的虚方法表交给儿子，儿子有自己的虚方法，也会加入表中
        只有父类的虚方法才会被子类继承
如何使用内存管理工具：
    保持程序在运行阶段---打开Terminal输入jps，可以取得正在运行的类的ID
    ---输入jhsdb hsdb就可以打开内存分析工具（JDK自带）---点击file--连接虚拟机---
    粘贴进程ID---点击Tools--Memory Viewer，随后输入运行代码得到的地址进行查看
    ---还可以通过inspector工具进行进一步查看
继承中：成员变量的访问特点
    就近原则，如有临时，本类，父类的同名变量，将按照临时--本类--父类的顺序查找并使用。如果想
从本类的变量开始找，可用this.，想从父类的变量开始找，可以使用super.，但是无法获得爷类中的变量
继承中：成员方法的访问特点
    直接调用满足就近原则，利用super调用，直接访问父类
    方法的重写：当父类的方法不能满足子类现在的需求，进行重写。重写时子类出现与父类一模一样的方
法声明，在上一行加上@Override（重写注解）
    方法重写的本质：继承父类虚方法表时，如果发生重写，则会覆盖表中的方法
    方法重写注意事项：
        子类重写父类时，访问权限必须大于等于父类(空着不写<protected<public)
        子类重写父类方法，返回值类型必须小于等于父类
        tips：重写方法尽量和父类保持一致
        只有虚方法表中的方法才可以被重写

注：一个Java文件只能有一个被public修饰的类，所以尽量一个文件放一个类
注：内存三区粗解
    栈内存---跟方法有关，方法被调用，进栈执行，方法执行完毕，从栈中出去
    堆内存---跟new关键字有关，创建的对象都在堆中
    方法区---跟字节码文件有关，一个类想要被使用，这个类的字节码文件就要加载到方法区当中临时储存
